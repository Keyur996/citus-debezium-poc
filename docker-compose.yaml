version: '3.9'

services:
  master:
    platform: linux/amd64
    container_name: 'postgres_master'
    build:
      context: .
      dockerfile: docker/citus.Dockerfile
    ports: ['${COORDINATOR_EXTERNAL_PORT:-5431}:5432']
    labels: ['com.citusdata.role=Master']
    command:
      [
        'postgres',
        '-c',
        'wal_level=logical',
        '-c',
        'wal_writer_delay=10',
        '-c',
        'max_replication_slots=10',
        '-c',
        'citus.enable_change_data_capture=on'
      ]
    volumes:
      - db:/var/lib/postgresql/data
    environment: &AUTH
      POSTGRES_USER: '${POSTGRES_USER:-postgres}'
      POSTGRES_PASSWORD: '${POSTGRES_PASSWORD:-123456789}'
      PGUSER: '${POSTGRES_USER:-postgres}'
      PGPASSWORD: '${POSTGRES_PASSWORD:-123456}'
      POSTGRES_HOST_AUTH_METHOD: '${POSTGRES_HOST_AUTH_METHOD:-trust}'
      DATABASE_NAME: ${POSTGRES_DB:-debezium_test}

  worker:
    platform: linux/amd64
    container_name: postgres_worker_1
    build:
      context: .
      dockerfile: docker/citus.Dockerfile
    labels: ['com.citusdata.role=Worker']
    depends_on: [master]
    environment: *AUTH
    command:
      [
        'postgres',
        '-c',
        'wal_level=logical',
        '-c',
        'wal_writer_delay=10',
        '-c',
        'max_replication_slots=10',
        '-c',
        'citus.enable_change_data_capture=on'
      ]
    deploy:
      replicas: 1
    volumes:
      - healthcheck-volume:/healthcheck

  manager:
    platform: linux/amd64
    container_name: 'postgres_manager'
    image: 'citusdata/membership-manager:0.3.0'
    volumes:
      - '${DOCKER_SOCK:-/var/run/docker.sock}:/var/run/docker.sock'
      - healthcheck-volume:/healthcheck
    depends_on: [master]
    environment: *AUTH

  zookeeper:
    container_name: zookeeper
    image: debezium/zookeeper
    ports:
      - 2182:2181
      - 2888:2888
      - 3888:3888
    environment:
      SERVER_ID: 1

  # postgres:
  #   container_name: postgres
  #   image: postgres:15-alpine
  #   ports:
  #     - 5436:5432
  #   command: postgres -c wal_level=logical -c max_wal_senders=1 -c max_replication_slots=1
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   environment:
  #     - POSTGRES_PASSWORD=postgres
  #     - POSTGRES_USER=postgres
  #     - POSTGRES_DB=normal_db

  kafka:
    container_name: kafka
    image: debezium/kafka
    ports:
      - '29092:9092'
    environment:
      BROKER_ID: 1
      ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://kafka:9092,OUTSIDE://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,OUTSIDE://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    restart: always

  debezium:
    image: debezium/connect:2.4
    container_name: debezium
    environment:
      GROUP_ID: 1
      BOOTSTRAP_SERVERS: kafka:9092
      CONFIG_STORAGE_TOPIC: connect_configs
      OFFSET_STORAGE_TOPIC: connect_offsets
      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      # CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      # CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
    depends_on:
      - kafka
      - master
      - manager
    ports:
      - 8084:8083

  debezium-ui:
    image: debezium/debezium-ui:latest
    container_name: debezium-ui
    environment:
      KAFKA_CONNECT_URIS: http://debezium:8083
    ports:
      - '8080:8080'
    depends_on:
      - debezium

  schema-registry:
    container_name: schema-registry
    image: confluentinc/cp-schema-registry:5.5.3
    environment:
      - SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL=zookeeper:2181
      - SCHEMA_REGISTRY_HOST_NAME=schema-registry
      - SCHEMA_REGISTRY_LISTENERS=http://schema-registry:8081
    ports:
      - 8081:8081
    depends_on:
      - zookeeper
      - kafka

  kafdrop:
    image: obsidiandynamics/kafdrop
    restart: 'no'
    environment:
      KAFKA_BROKERCONNECT: kafka:9092
    ports:
      - 9001:9000
    depends_on:
      - kafka

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8086:8080
    depends_on:
      - kafka
    environment:
      DYNAMIC_CONFIG_ENABLED: 'true'

volumes:
  postgres_data:
    driver: 'local'
  db:
    driver: local
  healthcheck-volume:
    driver: local
  postgres_healthcheck:
    driver: local
  postgres_master_data:
    driver: local
  postgres_worker_1_data:
    driver: local
